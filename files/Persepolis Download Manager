#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#this script is running persepolis for Linux
from newopen import Open
import osCommands
import os , sys , time , ast , argparse
    
# initialization
home_address = os.path.expanduser("~")

user_name_split = home_address.split('/')
user_name = user_name_split[2]

#persepolis tmp folder in /tmp
persepolis_tmp = '/tmp/persepolis_' + user_name

#persepolis lock file
lock_file = '/tmp/persepolis_exec_' + user_name + '.lock'
#this script is running persepolis for Linux
if not (os.path.isfile(lock_file)): 
    import initialization
    from mainwindow import MainWindow

from PyQt5.QtWidgets import QApplication  
from PyQt5.QtGui import QFont   
from PyQt5.QtCore import QCoreApplication , QSettings
from palettes import DarkRedPallete , DarkBluePallete , ArcDarkRedPallete , ArcDarkBluePallete , LightRedPallete , LightBluePallete
from bubble import notifySend
import osCommands
from error_window import ErrorWindow
import traceback


# ~/.config/persepolis_download_manager/ is download manager config folder
config_folder = str(home_address) + "/.config/persepolis_download_manager"

#load persepolis_settings
persepolis_setting = QSettings('persepolis_download_manager' , 'persepolis')

class PersepolisApplication(QApplication):
    def __init__(self,argv ):
        super().__init__(argv)

    def setPersepolisStyle(self , style  ):
        #setting style
        self.persepolis_style = style
        self.setStyle(style)

    def setPersepolisFont(self , font , font_size):
        #font and font_size
        self.persepolis_font = font
        self.persepolis_font_size = font_size
        self.setFont(QFont(font , font_size ))
#color_scheme 
    def setPersepolisColorScheme(self,color_scheme):
        self.persepolis_color_scheme = color_scheme
        if color_scheme == 'Persepolis Dark Red':
            persepolis_dark_red = DarkRedPallete()
            self.setPalette(persepolis_dark_red)
            self.setStyleSheet("QMenu::item:selected {background-color : #d64937 ;color : white} QToolTip { color: #ffffff; background-color: #353535; border: 1px solid white; }")
        elif color_scheme == 'Persepolis Dark Blue':
            persepolis_dark_blue = DarkBluePallete()
            self.setPalette(persepolis_dark_blue)
            self.setStyleSheet("QMenu::item:selected { background-color : #2a82da ;color : white } QToolTip { color: #ffffff; background-color: #353535; border: 1px solid white; }")
        elif color_scheme == 'Persepolis ArcDark Red':
            persepolis_arcdark_red = ArcDarkRedPallete()
            self.setPalette(persepolis_arcdark_red)
            self.setStyleSheet("QMenu::item:selected {background-color : #bf474d ; color : white} QToolTip { color: #ffffff; background-color: #353945; border: 1px solid white; } QPushButton {background-color: #353945  } QTabWidget {background-color : #353945;} QMenu {background-color: #353945 }")

        elif color_scheme == 'Persepolis ArcDark Blue':
            persepolis_arcdark_blue = ArcDarkBluePallete()
            self.setPalette(persepolis_arcdark_blue)
            self.setStyleSheet("QMenu::item:selected {background-color : #5294e2 ; color : white } QToolTip { color: #ffffff; background-color: #353945; border: 1px solid white; } QPushButton {background-color: #353945  } QTabWidget {background-color : #353945;} QMenu {background-color: #353945 }")
        elif color_scheme == 'Persepolis Light Red':
            persepolis_light_red = LightRedPallete()
            self.setPalette(persepolis_light_red)
            self.setStyleSheet("QMenu::item:selected {background-color : #d64937 ;color : white} QToolTip { color: #ffffff; background-color: #353535; border: 1px solid white; }")

        elif color_scheme == 'Persepolis Light Blue':
            persepolis_light_blue = LightBluePallete()
            self.setPalette(persepolis_light_blue)
            self.setStyleSheet("QMenu::item:selected { background-color : #2a82da ;color : white } QToolTip { color: #ffffff; background-color: #353535; border: 1px solid white; }")



#creating  terminal arguments  

parser = argparse.ArgumentParser(description='Persepolis Download Manager')
parser.add_argument('--link',action='store',nargs = 1 , help='Download link.(Use "" for links)' )
parser.add_argument('--referer',action='store',nargs = 1 , help='Set an http referrer (Referer). This affects all http/https downloads.  If * is given, the download URI is also used as the referrer.' )
parser.add_argument('--cookie',action='store',nargs = 1 , help='Cookie' )
parser.add_argument('--agent',action='store',nargs = 1 , help='Set user agent for HTTP(S) downloads.  Default: aria2/$VERSION, $VERSION is replaced by package version.' )
parser.add_argument('--headers',action='store',nargs = 1 , help='Append HEADER to HTTP request header. ' )
parser.add_argument('--name',action='store',nargs = 1 , help='The  file  name  of  the downloaded file. ' )
parser.add_argument('--default',action='store_true',help='restore default setting' )
parser.add_argument('--clear',action='store_true',help='Clear download list and user setting!' )
parser.add_argument('--tray',action='store_true',help="Persepolis is starting in tray icon. It's useful when you want to put persepolis in system's startup." )
parser.add_argument('--version', action='version', version='Persepolis Download Manager 2.3 Alpha ')
args = parser.parse_args()

#Mozilla firefox flashgot will send download information whith terminal arguments(link , referer , cookie , agent , headers , name )

#if --execute >> yes  >>> persepolis main window  will starts 
#if --execute >> no >>> persepolis started before!


add_link_dictionary = {}

if args.clear:
    status = osCommands.removeDir(str(config_folder))
    if status == 'ok' or status == 'no' :
        print ('Download list cleard!')
    else:
        print("persepolis can't clear download list")

    sys.exit(0)

if args.default :
    persepolis_setting = QSettings('persepolis_download_manager' , 'persepolis')
    persepolis_setting.clear()
    persepolis_setting.sync()
    print ('Persepolis restored default')
    sys.exit(0)

if args.tray :
    start_in_tray = 'yes'
else:
    start_in_tray = 'no'

if args.link :
    add_link_dictionary ['link'] = "".join(args.link)

if args.referer :
    add_link_dictionary['referer'] = "".join(args.referer)

if args.cookie :
    add_link_dictionary['load-cookies'] = "".join(args.cookie)

if args.agent :
    add_link_dictionary['user-agent'] = "".join(args.agent)

if args.headers :
    add_link_dictionary['header'] = "".join(args.headers)

if args.name :
    add_link_dictionary ['out'] = "".join(args.name)
#when flashgot calls persepolis  then persepolis is creating a request file in /tmp folder . this file contains download informations
#persepolis mainwindow checks /tmp for flashgot request file every 2 seconds ( see CheckFlashgot class in mainwindow.py )
#when requset received by CheckFlashgot, a popup window (AddLinkWindow) is coming up and window is getting additional download informations from user (port , proxy , ...) and download starts and request file deleted
if ('link' in add_link_dictionary):   
    #adding add_link_dictionary to /tmp/persepolis-flashgot
    f = open("/tmp/persepolis-flashgot","a")
    f.writelines(str(add_link_dictionary) + '\n')
    f.close()
    flashgot_ready = '/tmp/persepolis-flashgot-ready'
    osCommands.touch(flashgot_ready)



if not (os.path.isfile(lock_file)): #if lock_file is existed , it means persepolis is still running! 
    osCommands.touch(lock_file) #create lock_file in /tmp
#setting color_scheme and style
#see palettes.py and setting.py
    if __name__ == "__main__":
        persepolis_download_manager = PersepolisApplication(sys.argv)

        #setting organization name and domain and apllication name
        QCoreApplication.setOrganizationName('persepolis_download_manager')
        QCoreApplication.setApplicationName('persepolis')

        #Persepolis setting
        persepolis_download_manager.setting = QSettings()


        #getting user's desired font and style , ... from setting
        font = persepolis_download_manager.setting.value('settings/font')
        font_size = int(persepolis_download_manager.setting.value('settings/font-size'))
        style = persepolis_download_manager.setting.value('settings/style')
        color_scheme = persepolis_download_manager.setting.value('settings/color-scheme')


        persepolis_download_manager.setPersepolisStyle(style)
        persepolis_download_manager.setPersepolisFont(font,font_size)
        persepolis_download_manager.setPersepolisColorScheme(color_scheme)

        try:
            mainwindow = MainWindow( start_in_tray , persepolis_download_manager , persepolis_download_manager.setting )
            if start_in_tray == 'yes':
                mainwindow.hide()
            else:
                mainwindow.show()

        except Exception :
            #Resetting persepolis
            status = osCommands.removeDir(str(config_folder))
            #removing persepolis lock form /tmp
            f = Open(lock_file)
            f.close()
            f.remove()
            error_window = ErrorWindow(str(traceback.format_exc()))
            error_window.show()

        sys.exit(persepolis_download_manager.exec_())

    else:
         sys.exit(0)
else:
    print('lock file found in this path:')
    print(lock_file)
    print('you can remove it manually!')
    print('1.Run:')
    print ('killall persepolis')
    print('and then...')
    print('2.Run:')
    print('rm ' + lock_file )
#this section warns user that program is still running and no need to run it again
#and creating a file to notify mainwindow for showing
    if not('link' in add_link_dictionary):
        f = open(persepolis_tmp + "/show-window" , 'w')
        f.close()
    sys.exit(0)


